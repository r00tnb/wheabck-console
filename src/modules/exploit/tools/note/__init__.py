r'''Write a memo for the current webshel​​l.

'''

from api.exploit import WebshellExploit, Cmdline
from api.webshell import WebshellSession
from api import Session, logger, config
import argparse
import base64
import tempfile
import os

class exploit(WebshellExploit):

    def __init__(self):
        super().__init__()
        self.parse = argparse.ArgumentParser(
            prog='note', description="Write a memo for the current webshel​​l.")
        self.help = __doc__+self.parse.format_help()

        self._name = 'note-text'

    def support(self, session:WebshellSession)-> bool:
        '''判断当前命令是否支持指定的session， 一般来说session即为运行该命令时的session
        '''
        self.session = session
        return isinstance(self.session, WebshellSession)

    def run(self, args: Cmdline) -> int:
        args = self.parse.parse_args(args.options)

        text = self.load_config(self._name)
        if text is None:
            logger.warning("There is currently no memo!Will create a new.")
            text = {'note':''}

        text = text['note']
        raw_text = base64.b64decode(text.encode())
        with tempfile.TemporaryDirectory() as tmpdir:
            path = os.path.join(tmpdir, 'note')
            with open(path, 'wb') as f:
                f.write(raw_text)

            if os.system(f"{config.editor} {path}") != 0:
                logger.error(
                    f"Run editor `{config.editor}` failed!The editor must edit file in console like `vim filename` or `notepad filename`")
                logger.info(
                    f"You can change editor in config file `{os.path.join(config.root_path, 'config.py')}`")
                return self.STOP
            with open(path, 'rb') as f:
                text = f.read()
            if text == raw_text:
                logger.warning('The content has not been changed, so it has not been saved!')
            else:
                self.save_config(self._name, {'note': base64.b64encode(text).decode()})
                logger.info("Content has been updated!", True)
        return self.SUCCESS
