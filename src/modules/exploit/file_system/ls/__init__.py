r'''Show files and folders list.

'''

from api.exploit import WebshellExploit, Cmdline
from api.webshell import WebshellSession, Webshell
from api import logger, utils, tablor, colour
import argparse
import os
import re
import json
import time
import base64

class exploit(WebshellExploit):

    def __init__(self):
        super().__init__()
        self.parse = argparse.ArgumentParser(prog='ls')
        self.parse.add_argument('path', help="A path on server.", nargs='?', default=".")
        self.help = __doc__ + self.parse.format_help()

    def support(self, session:WebshellSession)-> bool:
        '''判断当前命令是否支持指定的session， 一般来说session即为运行改命令时的session
        '''
        self.session = session
        return isinstance(self.session, WebshellSession) and self.session.state['lang'] in (Webshell.PHP, Webshell.ASP_NET_CS, )

    def run(self, args:Cmdline)-> int:
        args = self.parse.parse_args(args.options)
        if args.path:
            ret = self.evalfile('ls', pwd=self.session.state['pwd'], path=args.path)
            ret = ret.data
            if ret is None:
                logger.error("Listing error!")
                return self.STOP
            ret = json.loads(ret)
            if ret['code'] == 1:
                table = [['Permissions', 'Owner', 'Group', 'Size', 'Mtime', 'Name']]
                for item in ret['msg']:
                    l = []
                    l.append(item[0])
                    l.append(item[1] if item[1] != '(Unknown)' else colour.colorize(item[1], 'note'))
                    l.append(item[2] if item[2] != '(Unknown)' else colour.colorize(item[2], 'note'))
                    l.append(self._format_size(item[3]))
                    l.append(self._format_time(item[4]))
                    tmp = base64.b64decode(item[5].encode()).decode(self.session.client.options.encoding, 'ignore')
                    l.append(self._format_filename(tmp, item[0]))
                    table.append(l)
                print(tablor(table, border=False, autocolor=False, aligning='right-4', indent=' '))
                return self.SUCCESS
            elif ret['code'] == -1:
                logger.error(f"Path `{args.path}` not found or access denied!")
            elif ret['code'] == -2:
                logger.error(f"Path `{args.path}` cannot list directory")

        return self.STOP

    def _format_size(self, size: int)-> str:
        unit = 'B'
        if size>9999:
            size /= 1024
            unit = 'KB'
        if size>9999:
            size /= 1024
            unit = 'MB'
        if size>9999:
            size /= 1024
            unit = 'GB'
        if size>9999:
            size /= 1024
            unit = 'TB'
        if size>9999:
            size /= 1024
            unit = 'PB'
        size = round(size, 2)
        if size-int(size) == 0:
            size = int(size)
        return str(size)+unit

    def _format_time(self, timestamp: int)-> str:
        time_local = time.localtime(timestamp)
        return time.strftime("%Y-%m-%d %H:%M:%S", time_local)

    def _format_filename(self, filename: str, perm: str)-> str:
        ret = filename
        key = 'back' if '-' not in perm[1:] else 'fore'
        color = {key:None}
        if perm[0] == 'd':
            color[key] = 'blue'
        elif perm[0] == 's':
            color[key] = 'purple'
        elif perm[0] == 'l':
            return colour(filename, [
                {
                    'regexp':r'^(.*?) ->',
                    'color':['bold', 'cyan', '']
                }
            ])
        elif perm[0] == 'p':
            color[key] = 'red'
        if color[key] is not None:
            ret = colour.colorize(ret, 'bold', **color)
        return ret