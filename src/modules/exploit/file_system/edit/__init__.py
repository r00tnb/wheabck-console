r'''Edit and save a file on server.
'''

from api.exploit import WebshellExploit, Cmdline
from api.webshell import WebshellSession, Webshell
from api import logger, config, utils
import argparse
import base64
import tempfile
import os
import json

class exploit(WebshellExploit):

    def __init__(self):
        super().__init__()
        self.parse = argparse.ArgumentParser(prog="edit", description="Edit and save a file on server.")
        self.parse.add_argument('source', help="A file on server.")
        self.help = __doc__ + self.parse.format_help()

    def support(self, session:WebshellSession)-> bool:
        '''判断当前命令是否支持指定的session， 一般来说session即为运行改命令时的session
        '''
        self.session = session
        return isinstance(self.session, WebshellSession) and self.session.server_info.lang in (Webshell.PHP, Webshell.ASP_NET_CS, )

    def run(self, args:Cmdline)-> int:
        is_new_file = False # 指定编辑的文件是否是新文件
        args = self.parse.parse_args(args.options)
        logger.info('Downloading...')
        data = self.evalfile('download', path=args.source, pwd=self.session.pwd)
        data = data.data
        if data is None:
            logger.error("Download error!")
            return self.STOP
        data = json.loads(data)
        if data['code'] == 0:
            logger.error(f"File `{args.source}` is not exist on server.")
            if utils.input(f"Do you want to edit a new file and upload to server? (y/n) ").lower() == 'y':
                is_new_file = True
            else:
                return self.STOP
        elif data['code'] == -1:
            logger.error(f"File is not readable!Check your permissions.")
            return self.STOP
        elif data['code'] == -2:
            logger.error(f"File is not writable!Check your permissions.")
            return self.STOP
        else:
            logger.info('Download over!')
        data = base64.b64decode(data['msg'].encode())
        fname = args.source.replace('/', '_').replace('\\', '_')
        with tempfile.TemporaryDirectory() as tmpdir:
            path = os.path.join(tmpdir, fname)
            with open(path, 'wb') as f:
                f.write(data)
        
            if os.system(f"{config.editor} {path}") != 0:
                logger.error(f"Run editor `{config.editor}` failed!The editor must edit file in console like `vim filename` or `notepad filename`")
                logger.info(f"You can change editor in config file `{os.path.join(config.root_path, 'config.py')}`")
                return self.STOP

            ret = b''
            with open(path, 'rb') as f:
                ret = f.read()
                if ret == data:
                    logger.warning('File content no changes!So do not upload!')
                    return self.SUCCESS
            
            logger.info("Uploading...")
            ret = self.evalfile('upload', data=ret, path=args.source, pwd=self.session.pwd)
            ret = ret.data
            if ret is None:
                logger.error("Upload error!")
                return self.STOP
            if ret == '1':
                logger.info(f"Edit file `{args.source}` success!")
                return self.SUCCESS
            elif ret == '-1':
                logger.error('Incomplete file writing!Try it again.')
            else:
                logger.error("Failed to edit file for unknown reason!")
        
        return self.STOP
        