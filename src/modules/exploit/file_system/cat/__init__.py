r'''Show remote file content.
'''

from api.exploit import WebshellExploit, Cmdline
from api.webshell import WebshellSession, Webshell
from api import logger, config, utils, colour
import argparse
import base64
import tempfile
import os
import json

class exploit(WebshellExploit):

    def __init__(self):
        super().__init__()
        self.parse = argparse.ArgumentParser(prog="cat", description="Show remote file content.")
        self.parse.add_argument('remote', help="A file path on server.")
        self.parse.add_argument('-v', '--view', help="View the file in editor.", action='store_true')
        self.help = __doc__ + self.parse.format_help()

    def support(self, session:WebshellSession)-> bool:
        '''判断当前命令是否支持指定的session， 一般来说session即为运行该命令时的session
        '''
        self.session = session
        return isinstance(self.session, WebshellSession) and self.session.state['lang'] in (Webshell.PHP, Webshell.ASP_NET_CS, )

    def run(self, args:Cmdline)-> int:
        args = self.parse.parse_args(args.options)
        ret = self.evalfile('cat', pwd=self.session.state['pwd'], path=args.remote)
        ret = ret.data
        if ret is None:
            logger.error("Read file error!")
            return self.STOP
        ret = json.loads(ret)
        if ret['code'] == 0:
            logger.error("Remote file is not exist!")
        elif ret['code'] == -1:
            logger.error("Remote file is not readable!Check your permissions.")
        elif ret['code'] == 1:
            data = base64.b64decode(ret['msg'].encode())
            if args.view:# 在编辑器中显示
                fname = args.remote.replace('/', '_').replace('\\', '_')
                with tempfile.TemporaryDirectory() as tmpdir:
                    path = os.path.join(tmpdir, fname)
                    with open(path, 'wb') as f:
                        f.write(data)

                    logger.info(f"View the file in editor `{config.editor}`.")
                    if os.system(f"{config.editor} {path}") != 0:
                        logger.error(f"Run editor `{config.editor}` failed!The editor must edit file in console like `vim filename` or `notepad filename`")
                        logger.info(f"You can change editor in config file `{os.path.join(config.root_path, 'config.py')}`")
                        return self.STOP
            else:
                data = data.decode(self.session.client.options.encoding, 'ignore')
                print(data)
            return self.SUCCESS
        return self.STOP