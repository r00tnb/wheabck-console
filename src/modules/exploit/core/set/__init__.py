r'''Set value for option from current webshell client.
'''

from api.exploit import Exploit, Cmdline
from api import logger, colour
import argparse
import re

class exploit(Exploit):
    def __init__(self):
        self.parse = argparse.ArgumentParser(prog='set', description='Set value for option from current webshell client.')
        self.parse.add_argument('name', help="A option name", type=self._check)
        self.parse.add_argument('value', help="A option value")
        self.help = __doc__ + self.parse.format_help()

    def _check(self, param: str)->str:
        test = r'[\w\-]+'
        if re.fullmatch(test, param):
            return param
        
        raise TypeError(f'Option name like `{test}`')

    def support(self, session)-> bool:
        '''判断当前命令是否支持指定的session， 一般来说session即为运行改命令时的session
        '''
        self.session = session
        return True

    def docomplete(self, text: str)-> dict:
        result = []
        pre = ''

        webshell = self.session.client
        if webshell is None:
            return {'pre':pre, 'matchs':result}
        options = webshell.options.option_list()[1:]
        options = [i[0] for i in options]
        match = re.compile(r'^(set +)([\w\-]*)$').search(text)
        if match:
            pre = match.group(1)
            for name in options:
                if name.lower().startswith(match.group(2).lower()):
                    result.append(name+' ')

        return {'pre':pre, 'matchs':result}

    def run(self, args: Cmdline)-> int:
        if args.length != 3:
            print(self.help)
            return self.STOP
        name = args.options[0]
        value = args.options[1]
        webshell = self.session.client
        if webshell is None:
            logger.error('No webshell client is using.')
            return self.STOP

        options = webshell.options.option_list()[1:]
        options = [i[0] for i in options]
        if name not in options:
            logger.error(f"No options named `{name}`")
            return self.STOP
        if webshell.options.check(name, value):
            webshell.options.set_option(name, value)
            logger.info(f"{name} => {value}")
        else:
            logger.error(f'Options value is illegal.See its check rule.')
            return self.STOP
        
        return self.SUCCESS