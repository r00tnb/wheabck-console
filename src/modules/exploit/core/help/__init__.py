r'''Show command help or list all command.
'''

from api.exploit import Exploit, Cmdline
from api import colour, tablor
import argparse
import re

class exploit(Exploit):
    def __init__(self):
        self.parse = argparse.ArgumentParser(prog='help', description='Show command help or list all command.')
        self.parse.add_argument('-l', '--list', help="List all available command.", action='store_true', default=True)
        self.parse.add_argument('cmd', help="A command name")
        self.help = __doc__ + self.parse.format_help()

    def support(self, session)-> bool:
        '''判断当前命令是否支持指定的session， 一般来说session即为运行改命令时的session
        '''
        self.session = session
        return True

    def run(self, args: Cmdline)-> int:
        options = args.options
        if len(options) == 0:
            options = ['']
        args = self.parse.parse_args(options)
        if args.cmd != '':
            print(self._command_info(args.cmd))
        elif args.list:
            print(self._command_info(None))
        else:
            print(self.parse.format_help())
        return self.SUCCESS

    def _command_info(self, command=None)-> str:
        '''获取当前command的信息，若指定command则返回对应命令的帮助信息'''
        result = ''
        if command is None:
            for title, cmdmap in self.session['Command List'].items():
                info = []
                if len(cmdmap) > 0: 
                    info.append(['Command', 'Description'])
                    for cmd, func in cmdmap.items():
                        des = func.help
                        if des is None:
                            des = colour.colorize('No description.', 'note')
                        else:
                            des = des.lstrip('\t\n\r ').split('\n')[0]
                        
                        info.append([cmd, des])
                    result += tablor(info, title=title, border=False, max_width="30-1, 100-2")+'\n'
            info = [['Command', 'Description', 'Value']]
            if len(self.session.alias_command) > 0: 
                for cmd, func in self.session.alias_command.items():
                    des = func.help
                    if des is None:
                        des = colour.colorize('No description.', 'note')
                    else:
                        des = des.lstrip('\t\n\r ').split('\n')[0]
                        
                    info.append([cmd, des, func.value])
                result += tablor(info, title="Alias Commands", border=False, max_width="30-1, 100-2, 50-3")+'\n'
        else:
            for cmd, func in self.session.command_map.items():
                if cmd == command:
                    des = func.help
                    return '' if des is None else  des
            return None

        return result

    def docomplete(self, text: str)-> dict: # help命令补全
        result = []
        pre = ''
        match = re.compile(r'^(help )([\w\-]*)$', re.M).search(text)
        if match:
            pre = match.group(1)
            for cmd in self.session.command_map:
                if cmd.startswith(match.group(2).lower()):
                    result.append(cmd+' ')

        return {'pre':pre, 'matchs':result}