r'''Manage current active sessions.

Description:
    The `sessions' command is used to manage the currently generated webshel​​l session.
'''

from api.exploit import Exploit, Cmdline
from api.webshell import WebshellSession
from api import MainSession, logger, utils, tablor
import argparse

class exploit(Exploit):

    manager = None

    def __init__(self):
        self.parse = argparse.ArgumentParser(prog='sessions', description="Manage current active sessions.")
        self.parse.add_argument('-l', '--list', action='store_true', help="show current sessions list.", default=True)
        self.parse.add_argument('-i', '--id', help='switch to session by id.If id is not in active session list, it will switch to manager session.',
             type=int)
        self.parse.add_argument('-k', '--kill', help="Kill a active session by id", type=int, nargs="*")
        self.parse.add_argument('-f', help="Kill without confirmation", action='store_true')
        self.parse.add_argument('-r', '--refresh', help="Re-establish connection with current webshell", action='store_true')
        self.help = __doc__ + self.parse.format_help()

    def support(self, session)-> bool:
        '''判断当前命令是否支持指定的session， 一般来说session即为运行改命令时的session
        '''
        self.session = session
        if isinstance(self.session, MainSession):
            exploit.manager = self.session # 保存当前的主session实例
        return True

    def _switch(self, ID: int)-> int:
        if ID not in self.manager.session_map: # 切换到主session
            self.manager['current_session_id'] = None
            logger.info("Switch to session `manager`.")
        else: # 切换到指定的session
            self.manager['current_session_id'] = ID
            logger.info(f'Switch to session `{ID}`.')
        return self.SUCCESS

    def _kill(self, ID: int, force=False)-> int:
        if ID not in self.manager.session_map:
            logger.error(f"No session id is `{ID}`.")
            return self.STOP

        if isinstance(self.session, WebshellSession) and ID == self.session.id:
            logger.warning('You will kill the session you live on!')
        if force or utils.input(f"Are you sure to kill the session with id `{ID}` (y/n)").lower() == 'y':
            s = self.manager.session_map[ID]
            # 执行销毁时的回调函数
            s._hook_destroy()
            del self.manager.session_map[ID]
            logger.info(f"A session `{ID}` has been killed.", False)

            if isinstance(self.session, WebshellSession) and ID == self.session.id:
                return self._switch(0)
        
        return self.SUCCESS

    def _refresh(self)->int:
        if not isinstance(self.session, WebshellSession):
            return self.STOP

        if self.session.client.connect():
            logger.info("Re-establish connection with current webshell successfully!", True)
            return self.SUCCESS
        logger.error("Re-establish connection with current webshell failed!")
        return self.STOP

    def _list(self)-> int:
        session_list = [['ID', 'Session Type', 'Target', 'Origin']]
        pos = 0
        j = 0
        for i, s in self.manager.session_map.items():
            j += 1
            if isinstance(self.session, WebshellSession) and self.session.id == i:
                pos = j
            origin = 'create by exploit'
            if 'save_id' in s.state:
                origin = f'create by saved connection `{s.state.get("save_id")}`'
            session_list.append([i, s.state.get('type'), s.client.options.target, origin])

        print(tablor(session_list, border=False, title="Active Sessions", pos=pos, max_width="30-4, 30-3"))
        return self.SUCCESS

    def run(self, args: Cmdline)-> int:
        if self.manager is None:
            logger.error('Unavailable!Sessions command must be loaded by MainSession.')
            return self.STOP

        args = self.parse.parse_args(args.options)
        ret = self.SUCCESS
        if args.id is not None:
            ret = self._switch(args.id)
        elif args.kill is not None:
            if args.kill:
                for k in args.kill:
                    self._kill(k, True if args.f else False)
            elif isinstance(self.session, WebshellSession):
                self._kill(self.session.id, True if args.f else False)
        elif args.refresh:
            ret = self._refresh()
        elif args.list:
            ret = self._list()
        
        return ret