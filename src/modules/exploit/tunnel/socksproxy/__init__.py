r'''Forward socks proxy by HTTP tunnel.

'''
from api.exploit import WebshellExploit, Cmdline
from api.webshell import WebshellSession, Webshell
from api import Session, logger, utils, tablor, colour
import argparse
import re
from .proxy import SocksProxy

class exploit(WebshellExploit):
    
    def __init__(self):
        super().__init__()
        self.parse = argparse.ArgumentParser(prog='socksproxy', description="Forward socks proxy by HTTP tunnel")
        operate_group = self.parse.add_mutually_exclusive_group()
        operate_group.add_argument('--start', help="Start the socks proxy server.", action='store_true')
        operate_group.add_argument('--stop', help="Stop the socks proxy server.", action='store_true')
        operate_group.add_argument('--restart', help="Restart the socks proxy server.", action='store_true')
        operate_group.add_argument('--status', help="Show the socks proxy server status.", action='store_true')
        config_group = self.parse.add_argument_group("Config options")
        config_group.add_argument('-l', '--lhost', help="Specify a local address to listen.", default='127.0.0.1')
        config_group.add_argument('-p', '--lport', help="Specify a local port to listen.", type=int, default=1080)
        config_group.add_argument('-r', '--rhost', help="Specify a remote address to listen.", default="127.0.0.1")
        config_group.add_argument('-P', '--rport', help="Specify a remote port to listen.", type=int, default=50000)
        config_group.add_argument('-s', '--uploadsize', help="Set the data size limit for each upload.You can use k, m, etc. to set the size, setting 0 will not limit the size of the data uploaded each time.Such as 1024, 1024b, 1024k, etc. are all valid", 
            type=self._getsize, default="0")
        self.help = __doc__+self.parse.format_help()

        self.proxy = None

    def _getsize(self, size: str)-> int:
        '''用于转换传入的--uploadsize参数
        '''
        size = size.strip().rstrip('bB').lower()
        try:
            util = size[-1]
            if util not in 'km':
                return int(size)

            size = float(size[:-1])
            if util == 'k':
                size *= 1024
            elif util == 'm':
                size *= 1024*1024
            return int(size)
        except Exception as e:
            logger.error("Upload size parameter format error!(You can set like 1024, 1232k, 2131M, 0 etc.)")
            raise e

    def support(self, session:WebshellSession)-> bool:
        '''判断当前命令是否支持指定的session， 一般来说session即为运行该命令时的session
        '''
        self.session = session
        return isinstance(self.session, WebshellSession) and self.session.server_info.lang in (Webshell.PHP, Webshell.ASP_NET_CS, )

    def run(self, args: Cmdline)-> int:
        args = self.parse.parse_args(args.options)
        ret = self.SUCCESS
        if args.start:
            if self.proxy is not None and self.proxy.is_alive():
                logger.error("SocksProxy is running!You must stop it first!")
                return self.STOP
            self.proxy = SocksProxy(self)
            self.proxy.host = args.lhost
            self.proxy.port = args.lport
            self.proxy.shost = args.rhost
            self.proxy.sport = args.rport
            self.proxy.upload_buf_size = args.uploadsize
            self.proxy.setDaemon(True)
            self.proxy.start()
            logger.info(f"SocksProxy Local Server running at ({self.proxy.host}, {self.proxy.port})", True)
            return self.SUCCESS
        elif args.restart:
            if self.proxy is not None and self.proxy.is_alive():
                self.proxy.close()
            proxy = SocksProxy(self)
            if self.proxy is not None:
                proxy.host = self.proxy.host
                proxy.port = self.proxy.port
                proxy.shost = self.proxy.shost
                proxy.sport = self.proxy.sport
                proxy.upload_buf_size = self.proxy.upload_buf_size
            else:
                proxy.host = args.lhost
                proxy.port = args.lport
                proxy.shost = args.rhost
                proxy.sport = args.rport
                proxy.upload_buf_size = args.uploadsize
            proxy.setDaemon(True)
            proxy.start()
            self.proxy = proxy
            logger.info(f"SocksProxy Local Server restart at ({self.proxy.host}, {self.proxy.port})", True)
            return self.SUCCESS
        elif args.stop:
            ret =  self.stop()
        else:# status
            if self.proxy is not None and self.proxy.is_alive():
                logger.info("SocksProxy Local Server "+colour.colorize('Running', 'bold', 'green'))
            else:
                logger.info("SocksProxy Local Server "+colour.colorize('Stopped', 'bold', 'red'))
        return ret

    def stop(self)-> int:
        if self.proxy is not None and self.proxy.is_alive():
            logger.info(f"SocksProxy Local Server at ({self.proxy.host}, {self.proxy.port}) is stopping...")
            self.proxy.close()
            logger.info(f"SocksProxy Local Server at ({self.proxy.host}, {self.proxy.port}) has stopped!", False)
            return self.SUCCESS
        logger.error("SocksProxy Local Server is not running!")
        return self.STOP

    def docomplete(self, text: str)-> dict:
        result = {'pre':'', 'matchs':[]}
        match = re.fullmatch(r'(socksproxy +)([\w\-]*)', text)
        if match:
            result['pre'] = match.group(1)
            for key in ['--start', '--status', '--stop', '--restart']:
                if key.startswith(match.group(2).lower()):
                    result['matchs'].append(key+' ')
        return result

    def hook_destroy(self):
        if self.proxy is not None and self.proxy.is_alive():
            self.proxy.close()